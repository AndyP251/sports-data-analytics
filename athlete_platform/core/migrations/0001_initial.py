# Generated by Django 5.1.5 on 2025-03-02 20:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('ATHLETE', 'Athlete'), ('COACH', 'Coach'), ('ADMIN', 'Admin')], default='ATHLETE', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('active_data_sources', models.JSONField(default=list, help_text='List of active data sources for this user')),
                ('last_source_check', models.DateTimeField(auto_now=True, help_text='Last time the data sources were checked')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'core_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position', models.CharField(choices=[('FORWARD', 'Forward'), ('MIDFIELDER', 'Midfielder'), ('DEFENDER', 'Defender'), ('GOALKEEPER', 'Goalkeeper')], max_length=20)),
                ('jersey_number', models.IntegerField(blank=True, null=True)),
                ('height', models.DecimalField(decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=15)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CoreBiometricTimeSeries',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('sleep_heart_rate', models.JSONField(default=list)),
                ('sleep_stress', models.JSONField(default=list)),
                ('sleep_body_battery', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'core_biometric_time_series',
                'indexes': [models.Index(fields=['id'], name='core_biomet_id_3be53c_idx')],
            },
        ),
        migrations.CreateModel(
            name='GarminCredentials',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Garmin credentials', primary_key=True, serialize=False)),
                ('profile_type', models.CharField(default='default', max_length=20)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(max_length=255)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='garmin_credentials', to='core.athlete')),
            ],
            options={
                'db_table': 'core_garmin_credentials',
            },
        ),
        migrations.CreateModel(
            name='InjuryRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('injury_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('injury_type', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('MINOR', 'Minor'), ('MODERATE', 'Moderate'), ('SEVERE', 'Severe')], max_length=10)),
                ('description', models.TextField()),
                ('treatment_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='injuries', to='core.athlete')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coached_teams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='athlete',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='athletes', to='core.team'),
        ),
        migrations.CreateModel(
            name='WhoopCredentials',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Whoop credentials', primary_key=True, serialize=False)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(max_length=255)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scope', models.CharField(default='offline read:recovery read:cycles read:sleep read:workout read:profile', max_length=255)),
                ('athlete', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='whoop_credentials', to='core.athlete')),
            ],
            options={
                'db_table': 'core_whoop_credentials',
            },
        ),
        migrations.CreateModel(
            name='WorkoutData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_type', models.CharField(choices=[('STRENGTH', 'Strength Training'), ('CARDIO', 'Cardio'), ('RECOVERY', 'Recovery'), ('SKILLS', 'Skills Training'), ('MATCH', 'Match'), ('TEAM_PRACTICE', 'Team Practice')], max_length=20)),
                ('date', models.DateField()),
                ('duration', models.DurationField()),
                ('intensity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=10)),
                ('distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=6, null=True)),
                ('calories_burned', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workouts', to='core.athlete')),
            ],
        ),
        migrations.CreateModel(
            name='CoreBiometricData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('total_sleep_seconds', models.IntegerField(default=0)),
                ('deep_sleep_seconds', models.IntegerField(default=0)),
                ('light_sleep_seconds', models.IntegerField(default=0)),
                ('rem_sleep_seconds', models.IntegerField(default=0)),
                ('awake_seconds', models.IntegerField(default=0)),
                ('sleep_needed_seconds', models.IntegerField(default=0)),
                ('sleep_debt_seconds', models.IntegerField(default=0)),
                ('average_respiration', models.FloatField(default=0)),
                ('lowest_respiration', models.FloatField(default=0)),
                ('highest_respiration', models.FloatField(default=0)),
                ('body_battery_change', models.IntegerField(default=0)),
                ('sleep_resting_heart_rate', models.IntegerField(default=0)),
                ('resting_heart_rate', models.IntegerField(default=0)),
                ('max_heart_rate', models.IntegerField(default=0)),
                ('min_heart_rate', models.IntegerField(default=0)),
                ('last_seven_days_avg_resting_heart_rate', models.IntegerField(default=0)),
                ('total_calories', models.IntegerField(default=0)),
                ('active_calories', models.IntegerField(default=0)),
                ('calories_burned', models.FloatField(default=0)),
                ('bmr_calories', models.IntegerField(default=0)),
                ('net_calorie_goal', models.IntegerField(default=0)),
                ('total_distance_meters', models.FloatField(default=0)),
                ('total_steps', models.IntegerField(default=0)),
                ('daily_step_goal', models.IntegerField(default=0)),
                ('highly_active_seconds', models.IntegerField(default=0)),
                ('sedentary_seconds', models.IntegerField(default=0)),
                ('average_stress_level', models.IntegerField(default=0)),
                ('max_stress_level', models.IntegerField(default=0)),
                ('stress_duration_seconds', models.IntegerField(default=0)),
                ('rest_stress_duration', models.IntegerField(default=0)),
                ('activity_stress_duration', models.IntegerField(default=0)),
                ('low_stress_percentage', models.FloatField(default=0)),
                ('medium_stress_percentage', models.FloatField(default=0)),
                ('high_stress_percentage', models.FloatField(default=0)),
                ('user_calibrating', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('recovery_score', models.FloatField(default=0)),
                ('hrv_ms', models.FloatField(default=0)),
                ('strain', models.FloatField(default=0)),
                ('kilojoules', models.FloatField(default=0)),
                ('spo2_percentage', models.FloatField(default=0)),
                ('skin_temp_celsius', models.FloatField(default=0)),
                ('respiratory_rate', models.FloatField(default=0)),
                ('sleep_efficiency', models.FloatField(default=0)),
                ('sleep_consistency', models.FloatField(default=0)),
                ('sleep_performance', models.FloatField(default=0)),
                ('sleep_disturbances', models.IntegerField(default=0)),
                ('sleep_cycle_count', models.IntegerField(default=0)),
                ('no_data_seconds', models.IntegerField(default=0)),
                ('total_in_bed_seconds', models.IntegerField(default=0)),
                ('baseline_sleep_seconds', models.IntegerField(default=0)),
                ('need_from_sleep_debt_seconds', models.IntegerField(default=0)),
                ('need_from_recent_strain_seconds', models.IntegerField(default=0)),
                ('need_from_recent_nap_seconds', models.IntegerField(default=0)),
                ('user_id', models.IntegerField(default=0)),
                ('email', models.EmailField(default='', max_length=254)),
                ('first_name', models.CharField(default='', max_length=127)),
                ('last_name', models.CharField(default='', max_length=127)),
                ('gender', models.CharField(default='', max_length=127)),
                ('birthdate', models.DateField(default=django.utils.timezone.now)),
                ('height_cm', models.IntegerField(default=0)),
                ('weight_kg', models.IntegerField(default=0)),
                ('body_fat_percentage', models.FloatField(default=0)),
                ('source', models.CharField(default='garmin', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_data', to='core.athlete')),
            ],
            options={
                'db_table': 'core_biometric_data',
                'indexes': [models.Index(fields=['-date'], name='core_biomet_date_7c9db8_idx'), models.Index(fields=['athlete', '-date'], name='core_biomet_athlete_499962_idx')],
                'unique_together': {('athlete', 'date')},
            },
        ),
        migrations.CreateModel(
            name='OAuthTokens',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=50)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField()),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oauth_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'provider')},
            },
        ),
    ]
