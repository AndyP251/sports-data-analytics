# Generated by Django 5.1.5 on 2025-01-26 21:12

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='user',
            options={},
        ),
        migrations.AddField(
            model_name='user',
            name='date_of_birth',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='phone_number',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_image',
            field=models.ImageField(blank=True, null=True, upload_to='profile_images/'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('ATHLETE', 'Athlete'), ('COACH', 'Coach'), ('ADMIN', 'Admin')], default='ATHLETE', max_length=10),
        ),
        migrations.AlterField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_groups', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        migrations.AlterModelTable(
            name='user',
            table='core_user',
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('FORWARD', 'Forward'), ('MIDFIELDER', 'Midfielder'), ('DEFENDER', 'Defender'), ('GOALKEEPER', 'Goalkeeper')], max_length=20)),
                ('jersey_number', models.IntegerField(blank=True, null=True)),
                ('height', models.DecimalField(decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=15)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InjuryRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('injury_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('injury_type', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('MINOR', 'Minor'), ('MODERATE', 'Moderate'), ('SEVERE', 'Severe')], max_length=10)),
                ('description', models.TextField()),
                ('treatment_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='injuries', to='core.athlete')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coached_teams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='athlete',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='athletes', to='core.team'),
        ),
        migrations.CreateModel(
            name='WorkoutData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_type', models.CharField(choices=[('STRENGTH', 'Strength Training'), ('CARDIO', 'Cardio'), ('RECOVERY', 'Recovery'), ('SKILLS', 'Skills Training'), ('MATCH', 'Match'), ('TEAM_PRACTICE', 'Team Practice')], max_length=20)),
                ('date', models.DateField()),
                ('duration', models.DurationField()),
                ('intensity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=10)),
                ('distance', models.DecimalField(blank=True, decimal_places=2, help_text='Distance in kilometers', max_digits=6, null=True)),
                ('calories_burned', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workouts', to='core.athlete')),
            ],
        ),
        migrations.CreateModel(
            name='BiometricData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('weight', models.DecimalField(decimal_places=2, default=70.0, help_text='Weight in kg', max_digits=5, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('height', models.DecimalField(decimal_places=2, default=170.0, help_text='Height in cm', max_digits=5, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)])),
                ('resting_heart_rate', models.IntegerField(default=60, help_text='Beats per minute', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_systolic', models.IntegerField(default=120, help_text='Systolic blood pressure', validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(200)])),
                ('blood_pressure_diastolic', models.IntegerField(default=80, help_text='Diastolic blood pressure', validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(130)])),
                ('body_fat_percentage', models.DecimalField(blank=True, decimal_places=1, help_text='Body fat percentage', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(50)])),
                ('hrv', models.IntegerField(blank=True, help_text='Heart Rate Variability', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('sleep_hours', models.DecimalField(decimal_places=2, default=8.0, help_text='Hours of sleep', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('stress_level', models.IntegerField(default=5, help_text='Stress level from 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_data', to='core.athlete')),
            ],
            options={
                'verbose_name': 'Biometric Data',
                'verbose_name_plural': 'Biometric Data',
                'ordering': ['-date'],
                'unique_together': {('athlete', 'date')},
            },
        ),
    ]
