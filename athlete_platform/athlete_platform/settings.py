"""
Django settings for athlete_platform project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
from dotenv import load_dotenv
from cryptography.fernet import Fernet
from core.utils.encryption_utils import encrypt_value
import logging

# Load environment variables once at the start
load_dotenv()

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Debugging environment variables
print("Environment variables loaded:")
print(f"ENCRYPTION_KEY exists: {'ENCRYPTION_KEY' in os.environ}")
print(f"Current directory: {os.getcwd()}")

# Add this right after the load_dotenv() call, around line 23-24
# Encryption setup (must be before any other settings that might use it)
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY') or os.getenv('GARMIN_ACCOUNT_ENCRYPTION_KEY')

if not ENCRYPTION_KEY:
    logger.warning("No encryption key found in environment variables. Generating new key...")
    ENCRYPTION_KEY = Fernet.generate_key()
    logger.warning(f"Generated new encryption key: {ENCRYPTION_KEY.decode()}")
    logger.warning("Add this key to your .env file as ENCRYPTION_KEY")
else:
    # Convert string key to bytes if necessary
    if isinstance(ENCRYPTION_KEY, str):
        ENCRYPTION_KEY = ENCRYPTION_KEY.strip().encode()

# Validate the key
try:
    Fernet(ENCRYPTION_KEY)
    logger.info("Encryption key validated successfully")
except Exception as e:
    logger.error(f"Invalid encryption key format: {e}")
    ENCRYPTION_KEY = Fernet.generate_key()
    logger.warning(f"Generated new encryption key: {ENCRYPTION_KEY.decode()}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'
DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "False") == "True"
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Local apps first (to avoid dependency issues)
    'core.apps.CoreConfig',
    
    # Third party apps
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_tailwind',

    'corsheaders',
    'storages',  # Make sure this is here
    'core.services',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'athlete_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'athlete_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# if DEVELOPMENT_MODE:
DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv('DB_NAME'),
    'USER': os.getenv('DB_USER'),
    'PASSWORD': os.getenv('DB_PASSWORD'),
    'HOST': os.getenv('DB_HOST'),
    'PORT': os.getenv('DB_PORT', '5432'),
    }
}
# elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
#     if os.getenv("DATABASE_URL", None) is None:
#         raise Exception("DATABASE_URL environment variable not defined")
#     DATABASES = {
#         "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
#     }

# Add after the DATABASES configuration (around line 117)
try:
    logger.info("Initializing database connection...")
    logger.info(f"Database host: {os.getenv('DB_HOST')}")
    logger.info(f"Database name: {os.getenv('DB_NAME')}")
    
    # Test the connection
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute("SELECT 1")
    logger.info("Database connection successful")
except Exception as e:
    logger.error(f"Database initialization failed: {str(e)}")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# AWS Settings
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

# Static files configuration
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Garmin Settings
GARMIN_USERNAME = os.getenv('GARMIN_USERNAME')
GARMIN_PASSWORD = os.getenv('GARMIN_PASSWORD')

GARMIN_USERNAME_ALT_1 = os.getenv('GARMIN_USERNAME_ALT_1', 'test_user')
GARMIN_PASSWORD_ALT_1 = os.getenv('GARMIN_PASSWORD_ALT_1', 'test_password')

GARMIN_USERNAME_ALT_2 = os.getenv('GARMIN_USERNAME_ALT_2', 'hash_user')
GARMIN_PASSWORD_ALT_2 = os.getenv('GARMIN_PASSWORD_ALT_2', 'hash_password')

# Encrypt credentials when defining profiles
GARMIN_PROFILES = {
    'default': {
        'name': 'Default Garmin Account',
        'username': encrypt_value(GARMIN_USERNAME),
        'password': encrypt_value(GARMIN_PASSWORD),
        'is_production': True
    },
    'test': {
        'name': 'Test Garmin Account',
        'username': encrypt_value(GARMIN_USERNAME_ALT_1),
        'password': encrypt_value(GARMIN_PASSWORD_ALT_1),
        'is_production': False
    },
    'hash': {
        'name': 'Hash Testing Account',
        'username': encrypt_value(GARMIN_USERNAME_ALT_2),
        'password': encrypt_value(GARMIN_PASSWORD_ALT_2),
        'is_production': False
    }
}

# Use different storage for development and production
if DEBUG:
    # Use local storage for development
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    # Use S3 for production
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_LOCATION = 'static'

# S3 Media settings
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/'

# Crispy Forms settings (Adds Tailwind support to Django forms for styling)
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Celery Configuration (Enables background tasks for long-running operations)
# CELERY_BROKER_URL = os.getenv('REDIS_URL')
# CELERY_RESULT_BACKEND = os.getenv('REDIS_URL')

# Custom User Model (Defines the custom user model for the project)
AUTH_USER_MODEL = 'core.User'

# Authentication Backends (Defines the authentication backends for the project)
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Django AllAuth settings (Configures AllAuth for user authentication)
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Change to 'mandatory' if you want email verification
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# Email settings (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SITE_ID = 1  # Required for allauth

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{asctime}] {levelname}: {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'app.log',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'core': {  # Your app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',  # Changed from DEBUG to INFO
            'propagate': False,
        },
        'django.db.backends': {  # Database queries
            'handlers': ['console'],
            'level': 'WARNING',  # Only log database warnings and errors
            'propagate': False,
        },
        'boto3': {
            'handlers': ['console'],
            'level': 'WARNING',  # Reduce AWS SDK noise
            'propagate': False,
        },
        'botocore': {
            'handlers': ['console'],
            'level': 'WARNING',  # Reduce AWS SDK noise
            'propagate': False,
        },
    },
}

CCORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    os.getenv('CORE_ALLOWED_ORIGIN_1', 'http://localhost:5173'),
    os.getenv('CORE_ALLOWED_ORIGIN_2', 'http://localhost:5173'),
]

CSRF_TRUSTED_ORIGIN_1 = os.getenv('CSRF_TRUSTED_ORIGIN_1', 'http://localhost:5173')

CSRF_TRUSTED_ORIGINS = [
    CSRF_TRUSTED_ORIGIN_1,
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost:\d+$",  # Allows all localhost ports
]


CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
# CSRF settings - Accept multiple header variations
CSRF_HEADER_NAME = 'HTTP_X_CSRF_TOKEN'  # Base setting
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False

# Comprehensive CORS and CSRF headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-requested-with',
    # CSRF Token variations
    'x-csrftoken',
    'x-csrf-token',
    'csrftoken',
    'csrf-token',
    'xsrf-token',
    'x-xsrf-token',
    'csrf',
    'xsrf',
    'x-csrf',
    'x-xsrf',
    'csrf-protection',
    '_csrf',
    # Case variations
    'X-CSRFToken',
    'X-CSRF-TOKEN',
    'CSRF-TOKEN',
    'CSRFTOKEN',
    'X-XSRF-TOKEN',
    'XSRF-TOKEN',
]


# CSRF_COOKIE_SECURE = not DEBUG  # False in development, True in production
#TODO
# Cookie settings
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# WHOOP Settings
WHOOP_CLIENT_ID = os.getenv('WHOOP_CLIENT_ID')
WHOOP_CLIENT_SECRET = os.getenv('WHOOP_CLIENT_SECRET')
WHOOP_REDIRECT_URI = os.getenv('WHOOP_REDIRECT_URI')  # e.g., https://yourdomain.com/oauth/whoop/callback

# Add cache configuration for sync locks
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.redis.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#     }
# }

#without redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Add this near your other environment variables
DEVELOPMENT_PASSWORD = os.getenv('DEVELOPMENT_PASSWORD')
if not DEVELOPMENT_PASSWORD:
    raise ValueError("DEVELOPMENT_PASSWORD must be set in environment variables")

# Add this to your CORS settings
CORS_ALLOW_ALL_ORIGINS = False  # Never allow all origins

# Only force SSL in production (HTTPS)
SECURE_SSL_REDIRECT = not DEBUG

# Make other security settings conditional as well
SESSION_COOKIE_SECURE = not DEBUG # Cookies only sent over HTTPS
CSRF_COOKIE_SECURE = not DEBUG # CSRF cookies only sent over HTTPS

# Add these security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking
